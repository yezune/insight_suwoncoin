{
  "name": "bitcore",
  "description": "Bitcoin Library",
  "version": "0.1.21",
  "author": {
    "name": "Stephen Pair",
    "email": "stephen@bitpay.com"
  },
  "contributors": [
    {
      "name": "Stefan Thomas",
      "email": "moon@justmoon.net"
    },
    {
      "name": "Jeff Garzik",
      "email": "jgarzik@bitpay.com"
    },
    {
      "name": "Manuel Araoz",
      "email": "manuelaraoz@gmail.com"
    },
    {
      "name": "Matias Alejo Garcia",
      "email": "ematiu@gmail.com"
    },
    {
      "name": "Ryan X. Charles",
      "email": "ryan@bitpay.com"
    },
    {
      "name": "Gordon Hall",
      "email": "gordon@bitpay.com"
    }
  ],
  "keywords": [
    "bitcoin",
    "btc",
    "satoshi",
    "money",
    "currency",
    "virtual"
  ],
  "main": "bitcore.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/Bushstar/bitcore.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "test": "mocha test -R spec",
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- --reporter spec test",
    "prepublish": "node browser/build.js -a"
  },
  "dependencies": {
    "jssha": "=1.5.0",
    "soop": "=0.1.5",
    "bindings": "=1.1.1",
    "bufferput": "git://github.com/bitpay/node-bufferput.git",
    "bignum": "=0.6.2",
    "binary": "=0.3.0",
    "step": "=0.0.4",
    "buffers": "=0.1.1",
    "buffertools": "=2.1.2",
    "browserify": "=3.40.0",
    "browser-pack": "=2.0.1",
    "commander": "=2.1.0",
    "browserify-buffertools": "git://github.com/maraoz/browserify-buffertools.git",
    "socks5-client": "~0.3.6",
    "brfs": "=1.0.0",
    "chai": "=1.9.1",
    "uglifyify": "=1.2.3",
    "async": "~0.2.10",
    "underscore": "~1.6.0"
  },
  "devDependencies": {
    "grunt-contrib-watch": "~0.5.3",
    "grunt-mocha-test": "~0.8.2",
    "grunt-shell": "~0.6.4",
    "grunt-browserify": "~2.0.0",
    "grunt-markdown": "~0.5.0",
    "mocha": ">=1.15.1",
    "brfs": "~1.0.0",
    "commander": "~2.1.0",
    "browser-pack": "~2.0.1",
    "istanbul": "~0.2.6"
  },
  "testling": {
    "harness": "mocha-bdd",
    "html": "test/index-testling.html",
    "browsers": [
      "ie/6..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6",
      "android-browser/latest"
    ]
  },
  "browser": {
    "bignum": "./lib/browser/Bignum.js",
    "./lib/Key.js": "./lib/browser/Key.js",
    "./lib/Point.js": "./lib/browser/Point.js",
    "./lib/SecureRandom.js": "./lib/browser/SecureRandom.js"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10"
  },
  "readme": "Bitcore\n=======\n\n[![Build Status](https://travis-ci.org/bitpay/bitcore.svg?branch=master)](https://travis-ci.org/bitpay/bitcore)\n\nA pure, powerful core for your bitcoin project.\n\nBitcore is a complete, native interface to the Bitcoin network, and provides the core functionality needed to develop apps for bitcoin.\n\n#Principles\n\nBitcoin is a powerful new peer-to-peer platform for the next generation of financial technology. The decentralized nature of the Bitcoin network allows for highly resilient bitcoin infrastructure, and the developer community needs reliable, open-source tools to implement bitcoin apps and services.\n\n**Bitcore unchains developers from fallible, centralized APIs, and provides the tools to interact with the real Bitcoin network.**\n\n#Get Started\n\nBitcore runs on [node](http://nodejs.org/), and can be installed via [npm](https://npmjs.org/):\n\n```\nnpm install bitcore\n```\n\nIt is a collection of objects useful to bitcoin applications; class-like idioms are enabled via [Soop](https://github.com/bitpay/soop). In most cases, a developer will require the object's class directly. For instance:\n\n```\nvar bitcore = require('bitcore');\nvar Address = bitcore.Address;\nvar Transaction = bitcore.Transaction;\nvar PeerManager = bitcore.PeerManager;\n```\n\n#Examples\n\nSome examples are provided at the [examples](/examples) path. Here are some snippets:\n\n## Validating an address\n\nValidating a Bitcoin address:\n\n```js\nvar bitcore = require('bitcore');\nvar Address = bitcore.Address;\n\nvar addrs = [\n  '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n  '1A1zP1eP5QGefi2DMPTfTL5SLmv7Dixxxx',\n  'A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n  '1600 Pennsylvania Ave NW',\n].map(function(addr) {\n  return new Address(addr);\n});\n\naddrs.forEach(function(addr) {\n  var valid = addr.isValid();\n  console.log(addr.data + ' is ' + (valid ? '' : 'not ') + 'valid');\n});\n```\n\n## Monitoring Blocks and Transactions\n\nFor this example you need a running bitcoind instance.\n\n```js\n  var bitcore = require('../bitcore');\n  var Peer = bitcore.Peer;\n  var PeerManager = bitcore.PeerManager;\n\n  var handleBlock = function(info) {\n    console.log('** Block Received **');\n    console.log(info.message);\n  };\n\n  var handleTx = function(info) {\n    var tx = info.message.tx.getStandardizedObject();\n\n    console.log('** TX Received **');\n    console.log(tx);\n  };\n\n  var handleInv = function(info) {\n    console.log('** Inv **');\n    console.log(info.message);\n\n    var invs = info.message.invs;\n    info.conn.sendGetData(invs);\n  };\n\n  var peerman = new PeerManager({\n    network: 'testnet'\n  });\n\n  peerman.addPeer(new Peer('127.0.0.1', 18608));\n\n  peerman.on('connection', function(conn) {\n    conn.on('inv', handleInv);\n    conn.on('block', handleBlock);\n    conn.on('tx', handleTx);\n  });\n\n  peerman.start();\n```\n\nPeerManager will emit the following events: 'version', 'verack', 'addr', 'getaddr', 'error' 'disconnect'; and will relay events like: 'tx', 'block', 'inv'. Please see  [PeerManager.js](PeerManager.js), [Peer.js](Peer.js) and [Connection.js](Connection.js)\n\n## Consuming bitcoind RPC\n\nFor this example you need a running bitcoind instance with RPC enabled.\n\n```js\nvar bitcore = require('bitcore');\nvar RpcClient = bitcore.RpcClient;\nvar hash = '0000000000b6288775bbd326bedf324ca8717a15191da58391535408205aada4';\n\nvar config = {\n  protocol: 'http',\n  user: 'user',\n  pass: 'pass',\n  host: '127.0.0.1',\n  port: '18607',\n};\n\nvar rpc = new RpcClient(config);\n\nrpc.getBlock(hash, function(err, ret) {\n  if (err) {\n    console.error('An error occured fetching block', hash);\n    console.error(err);\n    return;\n  }\n  console.log(ret);\n});\n```\n\nCheck the list of all supported RPC call at [RpcClient.js](lib/RpcClient.js)\n\n## Creating and sending a Transaction through P2P\n\nThe fee of the transaction can be given in `opts` or it will be determined \nby the transaction size. Documentation on the parameters of `TransactionBuilder`\ncan be found on the source file.\n\n```js\n  var bitcore = require('bitcore');\n  var Peer = bitcore.Peer;\n  var TransactionBuilder = bitcore.TransactionBuilder;\n  var PeerManager = bitcore.PeerManager;\n\n  // Unspent transactions can be found via the insight.bitcore.io or blockchain.info APIs\n  var unspent = [{\n      'txid': '707108b5ba4f78dc951df4647a03365bf36432ea57fb641676045c5044daaea7',\n      'vout': 0,\n      'address': 'n3QDC7DzsMmN4mcyp3k7XGPX7zFXXHG387',\n      'scriptPubKey': '76a914f00c4a92ee2314ab08ac0283dc8d07d9bf2be32388ac',\n      'amount': 0.12345600,\n      'confirmations': 43537\n    }, {\n      'txid': '87a158d32833cb555aea27b6a21af569ccaeb8f9b19691e05f1e6c2b3440bdb3',\n      'vout': 1,\n      'address': 'mxdrp9s4mVxS9X4RBYiLe99v59V81XA5C3',\n      'scriptPubKey': '76a914bbc87986da6b17c7876db4efacf59a95e14f6cf588ac',\n      'amount': 0.05749800,\n      'confirmations': 43536\n    }\n\n  ];\n\n  // Private keys in WIF format (see TransactionBuilder.js for other options)\n  var keys = [\n    'cQA75LXhV5JkMT8wkkqjR87SnHK4doh3c21p7PAd5tp8tc1tRBAY',\n    'cRz85dz9AiDieRpEwoucfXXQa1jdHHghcv6YnnVVGZ3MQyR1X4u2',\n    'cSq7yo4fvsbMyWVN945VUGUWMaSazZPWqBVJZyoGsHmNq6W4HVBV',\n    'cPa87VgwZfowGZYaEenoQeJgRfKW6PhZ1R65EHTkN1K19cSvc92G',\n    'cPQ9DSbBRLva9av5nqeF5AGrh3dsdW8p2E5jS4P8bDWZAoQTeeKB'\n  ];\n\n  var peerman = new PeerManager({\n    network: 'testnet'\n  });\n  peerman.addPeer(new Peer('127.0.0.1', 18608));\n\n  peerman.on('connect', function() {\n    var conn = peerman.getActiveConnection();\n    if (conn) {\n      // define transaction output\n      var outs = [{\n        address: 'mhNCT9TwZAGF1tLPpZdqfkTmtBkY282YDW',\n        amount: 0.1337\n      }];\n      // set change address\n      var opts = {\n        remainderOut: {\n          address: 'n4g2TFaQo8UgedwpkYdcQFF6xE2Ei9Czvy'\n        }\n      };\n      var tx = new TransactionBuilder(opts)\n        .setUnspent(unspent)\n        .setOutputs(outs)\n        .sign(keys)\n        .build();\n\n      /* Create and signing can be done in multiple steps:\n       *\n       *  var builder = new bitcore.TransactionBuilder(opts)\n       *                .setUnspent(utxos)\n       *                .setOutputs(outs);\n       *\n       *  // Sign with the first key\n       *  builder.sign(key1);\n       *  var tx = builder.build(); // Partially signed transaction\n       *\n       *  // Sign with the second key\n       *  builder.sign(key2);\n       *  if (builder.isFullySigned()){\n       *   var tx = builder.build();\n       *  }\n       *\n       *  var selectedUnspent = build.getSelectedUnspent(); // Retrieve selected unspent outputs from the transaction\n       */\n\n      var txid = tx.getHash().toString('hex');\n      console.log('Created transaction with txid '+txid);\n      var raw_tx = tx.serialize().toString('hex');\n      console.log('Transaction raw hex dump:');\n      console.log('-------------------------------------');\n      console.log(raw_tx);\n      console.log('-------------------------------------');\n      // finally, send transaction to the bitcoin network\n      conn.sendTx(tx);\n\n      // for now, the network won't respond in any case\n      // (transaction accepted, transaction rejected)\n      // in the future, we may listen to 'reject' message\n      // see https://gist.github.com/gavinandresen/7079034\n    }\n  });\n\n  peerman.start();\n```\n\n## Parsing a Script\n\nGets an address strings from a ScriptPubKey Buffer\n\n```js\nvar bitcore = require('bitcore');\nvar Address = bitcore.Address;\nvar coinUtil = bitcore.util;\nvar Script = bitcore.Script;\nvar network = bitcore.networks.testnet;\n\nvar getAddrStr = function(s) {\n  var addrStrs = [];\n  var type = s.classify();\n  var addr;\n\n  switch (type) {\n    case Script.TX_PUBKEY:\n      var chunk = s.captureOne();\n      addr = new Address(network.addressVersion, coinUtil.sha256ripe160(chunk));\n      addrStrs.push(addr.toString());\n      break;\n    case Script.TX_PUBKEYHASH:\n      addr = new Address(network.addressVersion, s.captureOne());\n      addrStrs.push(addr.toString());\n      break;\n    case Script.TX_SCRIPTHASH:\n      addr = new Address(network.P2SHVersion, s.captureOne());\n      addrStrs.push(addr.toString());\n      break;\n    case Script.TX_MULTISIG:\n      var chunks = s.capture();\n      chunks.forEach(function(chunk) {\n        var a = new Address(network.addressVersion, coinUtil.sha256ripe160(chunk));\n        addrStrs.push(a.toString());\n      });\n      break;\n    case Script.TX_UNKNOWN:\n      console.log('tx type unkown');\n      break;\n  }\n  return addrStrs;\n};\n\nvar script = 'DUP HASH160 0x14 0x3744841e13b90b4aca16fe793a7f88da3a23cc71 EQUALVERIFY CHECKSIG';\nvar s = Script.fromHumanReadable(script);\nconsole.log(getAddrStr(s)[0]); // mkZBYBiq6DNoQEKakpMJegyDbw2YiNQnHT\n```\n\n#Security\n\nPlease use at your own risk.\n\nBitcore is still under heavy development and not quite ready for \"drop-in\" production use. If you find a security issue, please email security@bitcore.io.\n\n#Contributing\n\nBitcore needs some developer love. Please send pull requests for bug fixes, code optimization, and ideas for improvement.\n\n#Browser support\n\n## Building the browser bundle\n\nTo build bitcore full bundle for the browser (this is automatically executed after you run `npm install`):\n\n```\nnode browser/build.js -a\n```\n\nThis will generate a `browser/bundle.js` file which you can include in your HTML to use bitcore in the browser.\n\n##Example browser usage\n\nFrom example/simple.html\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <script src=\"../browser/bundle.js\"></script>\n    <script>\n      var bitcore = require('bitcore');\n      var Address = bitcore.Address;\n      var a = new Address('1KerhGhLn3SYBEQwby7VyVMWf16fXQUj5d');\n      console.log('1KerhGhLn3SYBEQwby7VyVMWf16fXQUj5d is valid? '+a.isValid());\n    </script>\n  </body>\n</html>\n```\n\nYou can check a more complex usage example at examples/example.html.\n\n## Generating a customized browser bundle\n\nTo generate a customized bitcore bundle, you can specify which submodules you want to include in it with the -s option:\n\n```\nnode browser/build.js -s Transaction,Address\n```\n\nThis will generate a `browser/bundle.js` containing only the Transaction and Address class, with all their dependencies.  Use this option if you are not using the whole bitcore library, to optimize the bundle size, script loading time, and general resource usage.\n\n## Tests\n\nRun tests in node:\n\n```\nmocha\n```\n\nOr generate tests in the browser:\n\n```\ngrunt shell\n```\n\nAnd then open test/index.html in your browser.\n\nTo run the code coverage report:\n\n```\nnpm run-script coverage\n```\n\nAnd then open coverage/lcov-report/index.html in your browser.\n\n#License\n\n**Code released under [the MIT license](https://github.com/bitpay/bitcore/blob/master/LICENSE).**\n\nCopyright 2013-2014 BitPay, Inc. Bitcore is a trademark maintained by BitPay, Inc.\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/bitpay/bitcore/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n",
  "readmeFilename": "README.md",
  "gypfile": true,
  "bugs": {
    "url": "https://github.com/Bushstar/bitcore/issues"
  },
  "homepage": "https://github.com/Bushstar/bitcore",
  "_id": "bitcore@0.1.21",
  "_shasum": "a83c7766cadead6ccf5c960014608df4538d948a",
  "_resolved": "git://github.com/Bushstar/bitcore.git#de3e752d4990274c9fbe66584fbe9ef4731e6fab",
  "_from": "bitcore@git://github.com/Bushstar/bitcore.git#4d8af75ae9916984c52ee2eda1870d5980656341"
}
